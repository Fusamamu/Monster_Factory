//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Resources/InputActions/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Monster
{
    public partial class @PlayerControl : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerSelection"",
            ""id"": ""103197b4-8e22-446b-baa3-512904ed5e5f"",
            ""actions"": [
                {
                    ""name"": ""ChangePlayerControl"",
                    ""type"": ""Button"",
                    ""id"": ""c1f64771-ff37-4753-90af-f8eecb9f6cbc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""54d51385-887e-49c7-9df6-6894424cd7bd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangePlayerControl"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerSelection
            m_PlayerSelection = asset.FindActionMap("PlayerSelection", throwIfNotFound: true);
            m_PlayerSelection_ChangePlayerControl = m_PlayerSelection.FindAction("ChangePlayerControl", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerSelection
        private readonly InputActionMap m_PlayerSelection;
        private IPlayerSelectionActions m_PlayerSelectionActionsCallbackInterface;
        private readonly InputAction m_PlayerSelection_ChangePlayerControl;
        public struct PlayerSelectionActions
        {
            private @PlayerControl m_Wrapper;
            public PlayerSelectionActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @ChangePlayerControl => m_Wrapper.m_PlayerSelection_ChangePlayerControl;
            public InputActionMap Get() { return m_Wrapper.m_PlayerSelection; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerSelectionActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerSelectionActions instance)
            {
                if (m_Wrapper.m_PlayerSelectionActionsCallbackInterface != null)
                {
                    @ChangePlayerControl.started -= m_Wrapper.m_PlayerSelectionActionsCallbackInterface.OnChangePlayerControl;
                    @ChangePlayerControl.performed -= m_Wrapper.m_PlayerSelectionActionsCallbackInterface.OnChangePlayerControl;
                    @ChangePlayerControl.canceled -= m_Wrapper.m_PlayerSelectionActionsCallbackInterface.OnChangePlayerControl;
                }
                m_Wrapper.m_PlayerSelectionActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @ChangePlayerControl.started += instance.OnChangePlayerControl;
                    @ChangePlayerControl.performed += instance.OnChangePlayerControl;
                    @ChangePlayerControl.canceled += instance.OnChangePlayerControl;
                }
            }
        }
        public PlayerSelectionActions @PlayerSelection => new PlayerSelectionActions(this);
        public interface IPlayerSelectionActions
        {
            void OnChangePlayerControl(InputAction.CallbackContext context);
        }
    }
}
